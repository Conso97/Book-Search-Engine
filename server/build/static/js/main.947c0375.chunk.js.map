{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","CREATE_USER","gql","LOGIN_USER","SAVE_BOOK","DELETE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","useMutation","saveBook","handleSaveBook","saveBookError","updatedUser","bookToSave","find","Auth","loggedIn","userId","getProfile","_id","variables","loading","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","userData","setUserData","useQuery","queryMe","userDataLength","queryMeError","Object","keys","alert","user","getUserData","deleteBook","handleDeleteBook","deleteBookError","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","Login","props","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","LoginForm","handleModalClose","errorLink","onError","graphQLErrors","networkError","log","httpLink","createHttpLink","uri","process","SERVER_URI","authLink","setContext","_","headers","authorization","link","ApolloLink","from","client","ApolloClient","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.947c0375.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\n\nexport const CREATE_USER = gql`\n  mutation createUser($username: String!, $email: String!, $password: String!) {\n    createUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        savedBooks { \n          _id\n          authors\n          description\n          bookId\n          image\n          link\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        savedBooks { \n          _id\n          authors\n          description\n          bookId\n          image\n          link\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($userId: ID!, $book: String!) {\n    saveBook(userId: $userId, book: $book) {\n      _id\n      username\n      email\n      savedBooks { \n        _id\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOOK = gql`\n  mutation deletBook($userId: ID!, $book: String!) {\n    deleteBook(userId: $userId, book: $book) {\n      _id\n      username\n      email\n      savedBooks\n    }\n  }\n`;","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const [saveBook, { saveBookError, updatedUser }] = useMutation(SAVE_BOOK);\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    const userId = Auth.getProfile()._id;\n    \n    try {\n\n      const { loading, data } = saveBook({\n        variables: { userId: userId, book: bookToSave },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const QUERY_ME = gql`\n  query me($userId: ID!) {\n    me (userID: $userID) {\n      _id\n      username\n      email\n      savedBooks { \n        _id\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { DELETE_BOOK } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const [queryMe, { queryMeError, data }] = useQuery(QUERY_ME);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const userId = Auth.getProfile()._id;\n        alert(\"userId \" + userId);\n\n        const { loading, user } = queryMe({\n          variables: { userId: userId },\n        });\n\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  const [deleteBook, { deleteBookError, updatedUser }] = useMutation(DELETE_BOOK);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      const userId = Auth.getProfile()._id;\n\n      const { loading, updatedUser } = deleteBook({\n        variables: { userId: userId, bookId: bookId },\n      });\n\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { CREATE_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [createUser, { error, data }] = useMutation(CREATE_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData },\n      });\n      alert('user created');\n\n      Auth.login(data.createUser.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n      \n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: process.env.SERVER_URI || 'http://localhost:3001/graphql',\n  onError: (e) => { console.log(e) },\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst link = ApolloLink.from([errorLink, authLink, httpLink]);\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: link,\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n       <>\n         <Navbar />\n         <Switch>\n           <Route exact path='/' component={SearchBooks} />\n           <Route exact path='/saved' component={SavedBooks} />\n           <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n         </Switch>\n       </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}